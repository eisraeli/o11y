apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: on-pull-request
  annotations:
    pipelinesascode.tekton.dev/on-event: "[pull_request]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: git-url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
    - name: target-branch
      value: "{{target_branch}}"
  pipelineSpec:
    params:
      - name: git-url
        type: string
      - name: revision
        type: string
      - name: target-branch
        type: string           
    workspaces:
      - name: workspace
    tasks:
      - name: clone-repository
        params:
          - name: url
            value: $(params.git-url)
          - name: revision
            value: $(params.revision)
        workspaces:
          - name: output
            workspace: workspace
        taskRef:
          bundle: quay.io/redhat-appstudio/appstudio-tasks:510fa6e99f1fa1f816c96354bbaf1ad155c6d9c3-1
          name: git-clone

      - name: run-rules-linting
        workspaces:
          - name: workspace
            workspace: workspace
        runAfter:
          - clone-repository
        taskSpec:
          workspaces:
            - name: workspace
          params:
            - name: "CONFIG"              
              type: string
              default: ""
            - name: "WORKDIR"
              type: string
              default: ""              
            - name: "LOGLEVEL"
              type: string
              default: ""
            - name: "MIN_SEVERITY"
              type: string
              default: ""
            - name: "REQUIRE_OWNER"
              type: string
              default: ""
          steps:
            - name: run-pint
              image: ghcr.io/cloudflare/pint:0.42.1
              workingDir: $(workspaces.workspace.path)         
              script: |
                #!/bin/bash -ex

                if [ "$CONFIG" != "" ]; then
                    CONFIG="--config=$CONFIG"
                fi

                if  [ "$LOGLEVEL" != "" ]; then
                    LOGLEVEL="--log-level=$LOGLEVEL"
                fi

                if  [ "$MIN_SEVERITY" != "" ]; then
                    MIN_SEVERITY="--min-severity=$MIN_SEVERITY"
                fi

                if  [ "$(params.REQUIRE_OWNER)" != "" ]; then
                    REQUIRE_OWNER="--require-owner"
                fi
                
                # TODO: fetch base branch name from Tekton
                BASEBRANCH="main"            
                PRBRANCH="$(params.target-branch)"
                echo ">>> BASE BRANCH: $BASEBRANCH"
                echo ">>> PR BRANCH: $PRBRANCH"
                echo ">>> GIT URL: $(params.git-url)"

                # git fetch --unshallow
                # git remote add upstream "$(params.git-url)"
                # git fetch upstream "$(params.target-branch)"
                # git checkout $(git merge-base HEAD upstream/"$(params.target-branch)")




                git branch temp
                git checkout temp
                git log

                git remote add upstream "$(params.git-url)"
                git fetch --all
                git checkout upstream/"$(params.target-branch)" -b temp2
                
                git branch -a                
                git log

                pint ci
      - name: run-tests
        workspaces:
          - name: workspace
            workspace: workspace
        runAfter:
          - run-rules-linting
        taskSpec:
          workspaces:
            - name: workspace
          steps:
            - name: run-tests
              image: registry.access.redhat.com/ubi8/ubi:latest
              script: cd $(workspaces.workspace.path) && ./automation/test.sh

  workspaces:
    - name: workspace
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
